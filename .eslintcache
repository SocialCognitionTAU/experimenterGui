[{"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\index.js":"1","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\App.js":"2","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Components\\ToolbarComponent\\ToolbarComponent.js":"3","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Components\\SearchExperimentComponent\\SearchExperimentComponent.js":"4","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Components\\SearchExperimenterComponent\\SearchExperimenterComponent.js":"5","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Components\\SearchComponent\\SearchComponent.js":"6","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Components\\ExperimentComponent\\ExperimentComponent.js":"7","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Services\\ExcelService.js":"8","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Services\\DataService.js":"9","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\index.js":"10","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\App.js":"11","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Components\\ToolbarComponent\\ToolbarComponent.js":"12","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Components\\SearchExperimentComponent\\SearchExperimentComponent.js":"13","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Components\\SearchExperimenterComponent\\SearchExperimenterComponent.js":"14","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Components\\ExperimentComponent\\ExperimentComponent.js":"15","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Components\\SearchComponent\\SearchComponent.js":"16","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Services\\DataService.js":"17","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Services\\jsonServie.js":"18"},{"size":301,"mtime":1609101441419,"results":"19","hashOfConfig":"20"},{"size":1042,"mtime":1609103173727,"results":"21","hashOfConfig":"20"},{"size":761,"mtime":1609101441419,"results":"22","hashOfConfig":"20"},{"size":1260,"mtime":1615221704042,"results":"23","hashOfConfig":"20"},{"size":1121,"mtime":1615221715473,"results":"24","hashOfConfig":"20"},{"size":1512,"mtime":1609789623916,"results":"25","hashOfConfig":"20"},{"size":4820,"mtime":1624809866837,"results":"26","hashOfConfig":"20"},{"size":1839,"mtime":1615221737666,"results":"27","hashOfConfig":"20"},{"size":1763,"mtime":1624887233741,"results":"28","hashOfConfig":"20"},{"size":301,"mtime":1609101441419,"results":"29","hashOfConfig":"30"},{"size":1042,"mtime":1629314644038,"results":"31","hashOfConfig":"30"},{"size":761,"mtime":1609101441419,"results":"32","hashOfConfig":"30"},{"size":1256,"mtime":1629461064724,"results":"33","hashOfConfig":"30"},{"size":1121,"mtime":1615221715473,"results":"34","hashOfConfig":"30"},{"size":1655,"mtime":1629462573945,"results":"35","hashOfConfig":"30"},{"size":1512,"mtime":1609789623916,"results":"36","hashOfConfig":"30"},{"size":636,"mtime":1629460943353,"results":"37","hashOfConfig":"30"},{"size":413,"mtime":1629463247284,"results":"38","hashOfConfig":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1wq3zz",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"10k2ucg",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\index.js",[],["80","81"],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\App.js",[],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Components\\ToolbarComponent\\ToolbarComponent.js",[],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Components\\SearchExperimentComponent\\SearchExperimentComponent.js",[],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Components\\SearchExperimenterComponent\\SearchExperimenterComponent.js",[],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Components\\SearchComponent\\SearchComponent.js",[],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Components\\ExperimentComponent\\ExperimentComponent.js",["82","83"],"import { Component } from 'react';\r\nimport \"./ExperimentComponent.css\"\r\nimport { withRouter } from 'react-router-dom';\r\nimport ExcelService from '../../Services/ExcelService';\r\nimport DataService from '../../Services/DataService';\r\n\r\nclass ExperimentComponent extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {experimenterName: this.props.match.params.experimenterName, experimentName: this.props.match.params.experimentName , participants: [], ids: [], chooseAll: false};\r\n    }\r\n\r\n    async componentDidMount(){\r\n        await this.fetchParticipants();\r\n    }\r\n\r\n    fetchParticipants = async () => {\r\n        let dataService = new DataService();\r\n        let data = await dataService.getExperimentParticipants(this.state.experimenterName, this.state.experimentName);\r\n\r\n        this.setState({participants: data})\r\n    }\r\n\r\n    getTable = () => {\r\n        return (\r\n            <table>\r\n                <thead>\r\n                {this.getHeaders()}\r\n                </thead>\r\n                <tbody>\r\n                {this.getTableLines()}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    getHeaders = () => {\r\n        return(\r\n            <tr className=\"table-row\">\r\n                <th>Download</th>\r\n                <th>ID</th>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    getTableLines = () => {\r\n        let lines = [];\r\n\r\n        this.state.participants.forEach(participant => {\r\n            lines.push(this.getTableLine(participant));\r\n        });\r\n\r\n        return lines;\r\n    }\r\n\r\n    onClick = (id) => {\r\n        if (this.state.chooseAll){\r\n            this.setState({chooseAll: false});\r\n        }\r\n\r\n        let newIds = this.state.ids;\r\n\r\n        if (!this.state.ids.includes(id)){\r\n            newIds.push(id);\r\n\r\n            if (newIds.length == this.state.participants.length){\r\n                this.setState({chooseAll: true});\r\n            }\r\n        } else {\r\n            newIds = newIds.filter(item => item != id);\r\n        }\r\n\r\n        this.setState({ids: newIds});\r\n    }\r\n\r\n    chooseAll = () => {\r\n        if (this.state.chooseAll){\r\n            this.setState({ids:[], chooseAll:false});\r\n        } else {\r\n            let newIds = this.state.participants.map(item => item);\r\n            console.log(\"in chooseAll\")\r\n            console.log(this.state)\r\n            this.setState({ids: newIds, chooseAll: true});\r\n        }\r\n    }\r\n\r\n    getTableLine = (participantData) => {\r\n        let chosen = this.state.ids.includes(participantData);\r\n        return(\r\n            <tr className=\"table-row\" key={participantData}>\r\n                <td><button onClick={this.onClick.bind(this, participantData)} className={(chosen) ? \"chosen-participant\" : \"download-button\"}/></td>\r\n                <td> <div className=\"id\">{participantData}</div></td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    goToExperimenterPage = () => {\r\n        this.props.history.goBack();\r\n        \r\n    }\r\n\r\n    download = () => {\r\n        let e = new ExcelService();\r\n        e.zipExport(this.state.experimentName, this.state.experimenterName, this.state.ids);\r\n    }\r\n\r\n    unified = () => {\r\n        let e = new ExcelService();\r\n        e.excelExport(this.state.experimentName, this.state.experimenterName, this.state.ids);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container\">\r\n                <h1 className=\"experimenter-name\" onClick={this.goToExperimenterPage.bind(this)}>{this.props.match.params.experimenterName}</h1>\r\n                <h2>{this.props.match.params.experimentName}</h2>\r\n                <div className=\"experiment-body\">\r\n                <div className=\"data-controls\">\r\n                    <div className=\"select-all\">\r\n                  <button className={this.state.chooseAll ? \"chosen-participant\" : \"download-button\"} onClick={this.chooseAll.bind(this)}></button>  \r\n                  <label>{\"Select all\"}</label>\r\n                  </div>\r\n                  <button onClick={this.download.bind(this)} className=\"download-csv\">{\"Download Selected\"}</button>\r\n                  <button onClick={this.unified.bind(this)} className=\"download-csv\">{\"Download Selected Unified\"}</button>\r\n                </div>\r\n                <div className=\"table-metadata\">\r\n                    <div>\r\n                    <label>{\"Number of participants:\"}</label>\r\n                    <label>{this.state.participants.length}</label>\r\n                    </div>\r\n                    <div>\r\n                    <label>{\"Selected:\"}</label>\r\n                    <label>{this.state.ids.length}</label>\r\n                    </div>\r\n                    </div>\r\n                <this.getTable></this.getTable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ExperimentComponent);","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Services\\ExcelService.js",["84","85"],"import ExcelJS from \"exceljs/dist/es5/exceljs.browser\";\r\nimport saveAs from \"file-saver\";\r\nimport JSZip, { files } from \"jszip\";\r\nimport DataService from \"./DataService\";\r\n\r\nclass ExcelService {\r\n    constructor() { }\r\n    excelExport = async (experimentName, experimenterName, ids) => {\r\n        const workbook = new ExcelJS.Workbook();\r\n\r\n        let dataService = new DataService();\r\n\r\n        let excelRows = await dataService.getExperimentResultsAsUnifiedFile(experimenterName, experimentName, ids);\r\n\r\n        let sheet = workbook.addWorksheet('My Sheet');\r\n\r\n        sheet.columns = excelRows.data.headers;\r\n        sheet.addRows(excelRows.data.lines);\r\n\r\n        workbook.csv.writeBuffer().then((buffer) => {\r\n            saveAs(\r\n                new Blob([buffer], { type: \"application/octet-stream\" }),\r\n\r\n                'file.csv'\r\n            );\r\n        });\r\n    }\r\n\r\n    zipExport = async (experimentName, experimenterName, ids) => {\r\n        let zip = new JSZip();\r\n\r\n        let dataService = new DataService();\r\n\r\n        let excels = await dataService.getExcelDataForEachParticipant(experimenterName, experimentName, ids);\r\n\r\n        for (const excel of excels) {\r\n            let workbook = new ExcelJS.Workbook();\r\n\r\n            let sheet = workbook.addWorksheet(excel.participant_id);\r\n\r\n            sheet.columns = excel.participant_excel_data.headers;\r\n            sheet.addRows(excel.participant_excel_data.lines);\r\n\r\n            let buffer = await workbook.csv.writeBuffer();\r\n\r\n            let blob = new Blob([buffer], { type: \"application/octet-stream\" });\r\n            zip.file(excel.participant_id + \".csv\", blob, { binary: true });\r\n        }\r\n\r\n        zip.generateAsync({ type: \"blob\" }).then((content) => {\r\n            saveAs(content, \"folder.zip\");\r\n        })\r\n    }\r\n}\r\n\r\nexport default ExcelService;","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\experimenter-gui\\src\\Services\\DataService.js",["86"],"import axios from 'axios';\r\n\r\nclass DataService {\r\n    getExperimenters = async() => {\r\n        let data =  await axios.get(\"http://46.101.36.86:8080/getAllExperimenters\");\r\n\r\n        return data.data;\r\n    }\r\n\r\n    getExperiments = async(experimenterName) => {\r\n        let data =  await axios.get(\"http://46.101.36.86:8080/getExperimenterFolder/\" + experimenterName);\r\n\r\n        return data.data;\r\n    }\r\n\r\n    getExperimentNames = async(experimenterName) => {\r\n        let data = await this.getExperiments(experimenterName);\r\n        \r\n        let names = [];\r\n        \r\n        data.forEach(experiment => {\r\n            names.push(experiment.name);\r\n        });\r\n\r\n        return names;\r\n    }\r\n\r\n    getExperimentParticipants = async(experimenterName, experimentName) => {\r\n        let experiments = await this.getExperiments(experimenterName);\r\n\r\n        let participants = null;\r\n\r\n        experiments.forEach(experiment => {\r\n            if (experiment.name == experimentName){\r\n                participants = experiment.participants;\r\n            }\r\n        });\r\n\r\n        return participants;\r\n    }\r\n\r\n    getExperimentResultsAsUnifiedFile = async(experimenterName, experimentName, ids) => { \r\n        let data = await axios.post(\"http://46.101.36.86:8080/getUnifiedParticipantsData/\" + experimenterName + \"/\" + experimentName, {\r\n            participant_ids: ids\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    getExcelDataForEachParticipant = async(experimenterName, experimentName, ids) => {\r\n        let data = await axios.post(\"http://46.101.36.86:8080/getParticipsntsDataForExcel/\" + experimenterName + \"/\" + experimentName, {\r\n            participant_ids: ids\r\n        });\r\n\r\n        return data.data;\r\n    }\r\n}\r\n\r\nexport default DataService;","C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\index.js",[],["87","88"],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\App.js",[],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Components\\ToolbarComponent\\ToolbarComponent.js",[],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Components\\SearchExperimentComponent\\SearchExperimentComponent.js",[],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Components\\SearchExperimenterComponent\\SearchExperimenterComponent.js",[],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Components\\ExperimentComponent\\ExperimentComponent.js",[],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Components\\SearchComponent\\SearchComponent.js",[],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Services\\DataService.js",[],"C:\\Users\\gali1\\OneDrive\\Documents\\Work\\Social Cognition\\experimenterGui\\src\\Services\\jsonServie.js",["89"],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":66,"column":31,"nodeType":"96","messageId":"97","endLine":66,"endColumn":33},{"ruleId":"94","severity":1,"message":"98","line":70,"column":49,"nodeType":"96","messageId":"97","endLine":70,"endColumn":51},{"ruleId":"99","severity":1,"message":"100","line":3,"column":17,"nodeType":"101","messageId":"102","endLine":3,"endColumn":22},{"ruleId":"103","severity":1,"message":"104","line":7,"column":5,"nodeType":"105","messageId":"106","endLine":7,"endColumn":22},{"ruleId":"94","severity":1,"message":"95","line":34,"column":33,"nodeType":"96","messageId":"97","endLine":34,"endColumn":35},{"ruleId":"90","replacedBy":"107"},{"ruleId":"92","replacedBy":"108"},{"ruleId":"103","severity":1,"message":"104","line":4,"column":5,"nodeType":"105","messageId":"106","endLine":4,"endColumn":22},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'files' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["109"],["110"],"no-global-assign","no-unsafe-negation"]